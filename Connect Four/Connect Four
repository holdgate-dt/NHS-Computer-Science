from tkinter import *
from random import randint
from tkinter import messagebox

class ConnectFour():
    turnspace = 0
    gamemode = "pvp"
    column1 = ["white", "white", "white", "white", "white", "white"]
    column2 = ["white", "white", "white", "white", "white", "white"]
    column3 = ["white", "white", "white", "white", "white", "white"]
    column4 = ["white", "white", "white", "white", "white", "white"]
    column5 = ["white", "white", "white", "white", "white", "white"]
    column6 = ["white", "white", "white", "white", "white", "white"]
    column7 = ["white", "white", "white", "white", "white", "white"]
    columns = [column1, column2, column3, column4, column5, column6, column7]
    
    
    def reset(self):
        for x in range(len(self.columns)):
            for y in range(len(self.columns[x])):
                self.columns[x][y] = "white"
        self.turnspace = 0
        self.gamemode = None
        self.__init__(None)
    
    def setMode(self, mode):
        self.reset()
        self.gamemode = mode
        
    def drawBoard(self, columnNo):
        if self.gamemode == "pvp":
            while True:
                for x in range(len(self.columns[columnNo])):
                    if self.columns[columnNo][x] == "white":
                        if self.turnspace % 2 == 0:
                            self.columns[columnNo][x] = "red"
                            self.turnspace += 1
                            break
                        else:
                            self.columns[columnNo][x] = "yellow"
                            self.turnspace += 1
                            break
                break
            self.__init__(None)
        
        elif self.gamemode == "pvc":
            while True:
                for x in range(len(self.columns[columnNo])):
                    if self.columns[columnNo][x] == "white":
                        self.columns[columnNo][x] = "red"
                        break
                while True:
                    compCol = randint(0, 6)
                    if "white" in self.columns[compCol]:
                        for x in range(len(self.columns[compCol])):
                            if self.columns[compCol][x] == "white":
                                self.columns[compCol][x] = "yellow"
                                break
                    else:
                        continue
                    
                    break
                
                break
            self.__init__(None)
            
        circle_objects = [self.column1[0], self.column1[1], self.column1[2], self.column1[3], self.column1[4], self.column1[5], self.column2[0], self.column2[1], self.column2[2], self.column2[3], self.column2[4], self.column2[5], self.column3[0], self.column3[1], self.column3[2], self.column3[3], self.column3[4], self.column3[5], self.column4[0], self.column4[1], self.column4[2], self.column4[3], self.column4[4], self.column4[5], self.column5[0], self.column5[1], self.column5[2], self.column5[3], self.column5[4], self.column5[5], self.column6[0], self.column6[1], self.column6[2], self.column6[3], self.column6[4], self.column6[5], self.column7[0], self.column7[1], self.column7[2], self.column7[3], self.column7[4], self.column7[5]]
        for x in range(len(circle_objects)):
            above = [x+1, x+2, x+3]
            below = [x-1, x-2, x-3]
            right = [x+6, x+12, x+18]
            left = [x-6, x-12, x-18]
            nediagonal = [x+7, x+14, x+21]
            sediagonal = [x+5, x+10, x+15]
            swdiagonal = [x-7, x-14, x-21]
            nwdiagonal = [x-5, x-10, x-15]
            winScenarios = [above, below, right, left, nediagonal, sediagonal, swdiagonal, nwdiagonal]
            for scenario in winScenarios:
                tally = 0
                for index in scenario:
                    if index <= 41 and index >= 0:
                        if circle_objects[x] != "white" and circle_objects[x] == circle_objects[index]:
                            tally += 1
                if tally != 3:
                    continue
                elif tally == 3:
                    if self.turnspace % 2 == 1:
                        messagebox.showinfo("Win", "Red Wins")
                        self.setMode(self.gamemode)
                    else:
                        messagebox.showinfo("Win", "Yellow Wins")
                        self.setMode(self.gamemode)
            break
    def __init__(self, master):   
        w = Canvas(master, width=700, height=600, bg="#235BD6", bd = 0, highlightthickness = 0)
        w.place(x=0, y=100)
        self.C1R6 = w.create_oval(10, 10, 90, 90, fill=self.column1[5], width=2)
        self.C1R5 = w.create_oval(10, 110, 90, 190, fill=self.column1[4], width=2)
        self.C1R4 = w.create_oval(10, 210, 90, 290, fill=self.column1[3], width=2)
        self.C1R3 = w.create_oval(10, 310, 90, 390, fill=self.column1[2], width=2)
        self.C1R2 = w.create_oval(10, 410, 90, 490, fill=self.column1[1], width=2)
        self.C1R1 = w.create_oval(10, 510, 90, 590, fill=self.column1[0], width=2)
        
        self.C2R6 = w.create_oval(110, 10, 190, 90, fill=self.column2[5], width=2)
        self.C2R5 = w.create_oval(110, 110, 190, 190, fill=self.column2[4], width=2)
        self.C2R4 = w.create_oval(110, 210, 190, 290, fill=self.column2[3], width=2)
        self.C2R3 = w.create_oval(110, 310, 190, 390, fill=self.column2[2], width=2)
        self.C2R2 = w.create_oval(110, 410, 190, 490, fill=self.column2[1], width=2)
        self.C2R1 = w.create_oval(110, 510, 190, 590, fill=self.column2[0], width=2)
        
        self.C3R6 = w.create_oval(210, 10, 290, 90, fill=self.column3[5], width=2)
        self.C3R5 = w.create_oval(210, 110, 290, 190, fill=self.column3[4], width=2)
        self.C3R4 = w.create_oval(210, 210, 290, 290, fill=self.column3[3], width=2)
        self.C3R3 = w.create_oval(210, 310, 290, 390, fill=self.column3[2], width=2)
        self.C3R2 = w.create_oval(210, 410, 290, 490, fill=self.column3[1], width=2)
        self.C3R1 = w.create_oval(210, 510, 290, 590, fill=self.column3[0], width=2)
        
        self.C4R6 = w.create_oval(310, 10, 390, 90, fill=self.column4[5], width=2)
        self.C4R5 = w.create_oval(310, 110, 390, 190, fill=self.column4[4], width=2)
        self.C4R4 = w.create_oval(310, 210, 390, 290, fill=self.column4[3], width=2)
        self.C4R3 = w.create_oval(310, 310, 390, 390, fill=self.column4[2], width=2)
        self.C4R2 = w.create_oval(310, 410, 390, 490, fill=self.column4[1], width=2)
        self.C4R1 = w.create_oval(310, 510, 390, 590, fill=self.column4[0], width=2)
        
        self.C5R6 = w.create_oval(410, 10, 490, 90, fill=self.column5[5], width=2)
        self.C5R5 = w.create_oval(410, 110, 490, 190, fill=self.column5[4], width=2)
        self.C5R4 = w.create_oval(410, 210, 490, 290, fill=self.column5[3], width=2)
        self.C5R3 = w.create_oval(410, 310, 490, 390, fill=self.column5[2], width=2)
        self.C5R2 = w.create_oval(410, 410, 490, 490, fill=self.column5[1], width=2)
        self.C5R1 = w.create_oval(410, 510, 490, 590, fill=self.column5[0], width=2)
        
        self.C6R6 = w.create_oval(510, 10, 590, 90, fill=self.column6[5], width=2)
        self.C6R5 = w.create_oval(510, 110, 590, 190, fill=self.column6[4], width=2)
        self.C6R4 = w.create_oval(510, 210, 590, 290, fill=self.column6[3], width=2)
        self.C6R3 = w.create_oval(510, 310, 590, 390, fill=self.column6[2], width=2)
        self.C6R2 = w.create_oval(510, 410, 590, 490, fill=self.column6[1], width=2)
        self.C6R1 = w.create_oval(510, 510, 590, 590, fill=self.column6[0], width=2)
        
        self.C7R6 = w.create_oval(610, 10, 690, 90, fill=self.column7[5], width=2)
        self.C7R5 = w.create_oval(610, 110, 690, 190, fill=self.column7[4], width=2)
        self.C7R4 = w.create_oval(610, 210, 690, 290, fill=self.column7[3], width=2)
        self.C7R3 = w.create_oval(610, 310, 690, 390, fill=self.column7[2], width=2)
        self.C7R2 = w.create_oval(610, 410, 690, 490, fill=self.column7[1], width=2)
        self.C7R1 = w.create_oval(610, 510, 690, 590, fill=self.column7[0], width=2)
        
        self.columns = [self.column1, self.column2, self.column3, self.column4, self.column5, self.column6, self.column7]
        
        self.C1button = Button(master, text="", bg="#FFFFFF", command=lambda:self.drawBoard(0))
        self.C1button.place(x=10, y=10, width=80, height=80)
        
        self.C2button = Button(master, text="", bg="#FFFFFF", command=lambda:self.drawBoard(1))
        self.C2button.place(x=110, y=10, width=80, height=80)
        
        self.C3button = Button(master, text="", bg="#FFFFFF", command=lambda:self.drawBoard(2))
        self.C3button.place(x=210, y=10, width=80, height=80)
        
        self.C4button = Button(master, text="", bg="#FFFFFF", command=lambda:self.drawBoard(3))
        self.C4button.place(x=310, y=10, width=80, height=80)
        
        self.C5button = Button(master, text="", bg="#FFFFFF", command=lambda:self.drawBoard(4))
        self.C5button.place(x=410, y=10, width=80, height=80)
        
        self.C6button = Button(master, text="", bg="#FFFFFF", command=lambda:self.drawBoard(5))
        self.C6button.place(x=510, y=10, width=80, height=80)
        
        self.C7button = Button(master, text="", bg="#FFFFFF", command=lambda:self.drawBoard(6))
        self.C7button.place(x=610, y=10, width=80, height=80)
   
        self.resetButton = Button(master, text="reset", bg="#FFFFFF", command=lambda:self.reset())
        self.resetButton.place(x=700, y=650, width=40, height=40)
        
        self.pvpButton = Button(master, text="pvp", bg="#FFFFFF", command=lambda:self.setMode("pvp"))
        self.pvpButton.place(x=700, y=10, width=40, height=310)
        
        self.pvcButton = Button(master, text="pvc", bg="#FFFFFF", command=lambda:self.setMode("pvc"))
        self.pvcButton.place(x=700, y=330, width=40, height=310)
root = Tk()
root.configure(bg="#235BD6")
root.geometry("750x700")
ConnectFour = ConnectFour(root)
root.mainloop()
