#LightsOut
from tkinter import *
import random

class LightsOut:
    
    light_objects = None
    
    #list of solvable levels
    puzzles = [[8, 12, 13], [8, 11, 12, 13, 14, 15], [0, 4, 5, 8, 9, 12, 13, 14], [1, 2, 3, 4, 5, 7, 10, 11, 14], [1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14], [2, 3, 4, 5, 7, 9, 11, 13, 14], [0, 1, 4, 6, 7, 10, 11, 12, 15], [1, 2, 3, 5, 8, 11, 13, 14], [1, 2, 4, 5, 6, 7, 8, 9, 10, 13, 15], [0, 1, 2, 3, 5, 7, 9, 11, 13, 14], [2, 4, 7, 9, 11, 12, 15], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]]
    
    #starts at level 0 on launch
    current_puzzle_num = 0
    
    def puzzle_change(self, action):
        global current_puzzle_num
        
        #either goes back or forward a level, depending on the button clicked
        if action == "Previous":
            if self.current_puzzle_num > 0:
                self.current_puzzle_num -= 1
                self.current_puzzle.configure(text=str(self.current_puzzle_num))
        elif action == "Next":
            if self.current_puzzle_num < (len(self.puzzles) - 1):
                self.current_puzzle_num += 1
                self.current_puzzle.configure(text=str(self.current_puzzle_num))
        
        #turns all lights off, then turns on the lights in the given level
        for i in range(16):
            self.light_objects[i].configure(bg="#808080", activebackground="#FFFF00")
        
        for light in self.puzzles[self.current_puzzle_num]:
            self.light_objects[light].configure(bg="#FFFF00", activebackground="#808080")
  
    
    def on_start(self):
        #turns off all the lights
        for i in range(15):
            self.light_objects[i].configure(bg="#808080", activebackground="#FFFF00")
        
        #turns on the lights listed in one of the solvable scenarios
        for light in self.puzzles[self.current_puzzle_num]:
            self.light_objects[light].configure(bg="#FFFF00", activebackground="#808080")
                              
    def on_click(self, main):
        #defines the place values of the adjacent buttons
        right = main + 1
        above = main + 4
        left = main - 1
        below = main -4
        #changes the color of the light clicked
        if self.light_objects[main].cget("bg") == "#808080": 
            self.light_objects[main].configure(bg="#FFFF00", activebackground="#808080")
        else:
            self.light_objects[main].configure(bg="#808080", activebackground="#FFFF00")
                              
        #changes the color of adjacent lights
        if (right != 4) and (right != 8) and (right != 12) and (right != 16):
            if self.light_objects[right].cget("bg") == "#808080": 
                self.light_objects[right].configure(bg="#FFFF00", activebackground="#808080")
            else:
                self.light_objects[right].configure(bg="#808080", activebackground="#FFFF00")
        if (left != -1) and (left != 3) and (left != 7) and (left != 11):
            if self.light_objects[left].cget("bg") == "#808080": 
                self.light_objects[left].configure(bg="#FFFF00", activebackground="#808080")
            else:
                self.light_objects[left].configure(bg="#808080", activebackground="#FFFF00")
        if (above != 16) and (above != 17) and (above != 18) and (above != 19):
            if self.light_objects[above].cget("bg") == "#808080": 
                self.light_objects[above].configure(bg="#FFFF00", activebackground="#808080")
            else:
                self.light_objects[above].configure(bg="#808080", activebackground="#FFFF00")
        if (below != -4) and (below != -3) and (below != -2) and (below != -1):
            if self.light_objects[below].cget("bg") == "#808080": 
                self.light_objects[below].configure(bg="#FFFF00", activebackground="#808080")
            else:
                self.light_objects[below].configure(bg="#808080", activebackground="#FFFF00")  
    
    def __init__(self, master):
        self.master = master
        master.title("Lights Out")
        
        #creates the lights
        self.light1 = Button(master, bg="#808080", activebackground="#FFFF00", command=lambda:self.on_click(0))
        self.light1.place(x = 0, y = 240, height=80, width=80)
        
        self.light2 = Button(master, bg="#808080", activebackground="#FFFF00", command=lambda:self.on_click(1))
        self.light2.place(x = 80, y = 240, height=80, width=80)
        
        self.light3 = Button(master, bg="#808080", activebackground="#FFFF00", command=lambda:self.on_click(2))
        self.light3.place(x = 160, y = 240, height=80, width=80)
        
        self.light4 = Button(master, bg="#808080", activebackground="#FFFF00", command=lambda:self.on_click(3))
        self.light4.place(x = 240, y = 240, height=80, width=80)
        
        self.light5 = Button(master, bg="#808080", activebackground="#FFFF00", command=lambda:self.on_click(4))
        self.light5.place(x = 0, y = 160, height=80, width=80)
        
        self.light6 = Button(master, bg="#808080", activebackground="#FFFF00", command=lambda:self.on_click(5))
        self.light6.place(x = 80, y = 160, height=80, width=80)
        
        self.light7 = Button(master, bg="#808080", activebackground="#FFFF00", command=lambda:self.on_click(6))
        self.light7.place(x = 160, y = 160, height=80, width=80)
        
        self.light8 = Button(master, bg="#808080", activebackground="#FFFF00", command=lambda:self.on_click(7))
        self.light8.place(x = 240, y = 160, height=80, width=80)
        
        self.light9 = Button(master, bg="#808080", activebackground="#FFFF00", command=lambda:self.on_click(8))
        self.light9.place(x = 0, y = 80, height=80, width=80)
        
        self.light10 = Button(master, bg="#808080", activebackground="#FFFF00", command=lambda:self.on_click(9))
        self.light10.place(x = 80, y = 80, height=80, width=80)
        
        self.light11 = Button(master, bg="#808080", activebackground="#FFFF00", command=lambda:self.on_click(10))
        self.light11.place(x = 160, y = 80, height=80, width=80)
        
        self.light12 = Button(master, bg="#808080", activebackground="#FFFF00", command=lambda:self.on_click(11))
        self.light12.place(x = 240, y = 80, height=80, width=80)
        
        self.light13 = Button(master, bg="#808080", activebackground="#FFFF00", command=lambda:self.on_click(12))
        self.light13.place(x = 0, y = 0, height=80, width=80)
        
        self.light14 = Button(master, bg="#808080", activebackground="#FFFF00", command=lambda:self.on_click(13))
        self.light14.place(x = 80, y = 0, height=80, width=80)
        
        self.light15 = Button(master, bg="#808080", activebackground="#FFFF00", command=lambda:self.on_click(14))
        self.light15.place(x = 160, y = 0, height=80, width=80)
        
        self.light16 = Button(master, bg="#808080", activebackground="#FFFF00", command=lambda:self.on_click(15))
        self.light16.place(x = 240, y = 0, height=80, width=80)
       
        #shows what level you're on now
        self.current_puzzle = Label(master, text=str(self.current_puzzle_num), fg="#FFFF00", bg="#808080", activebackground="#FFFFFF")
        self.current_puzzle.place(x = 140, y = 320, height = 40, width = 40)
        #button to change puzzle
        self.previous_puzzle = Button(master, text="<-- Previous", fg="#FFFF00", bg="#808080", activebackground="#FFFFFF", command=lambda:self.puzzle_change("Previous"))
        self.previous_puzzle.place(x = 0, y = 320, height = 40, width = 140)
        self.next_puzzle = Button(master, text="Next -->", fg="#FFFF00", bg="#808080", activebackground="#FFFFFF", command=lambda:self.puzzle_change("Next"))
        self.next_puzzle.place(x = 180, y = 320, height = 40, width = 140)
        
        #list of lights and calls the function to turn on the puzzle
        self.light_objects = [self.light1,self.light2,self.light3, self.light4, self.light5, self.light6, self.light7, self.light8, self.light9, self.light10, self.light11, self.light12, self.light13, self.light14, self.light15, self.light16]
        self.on_start()
        
root = Tk()
root.geometry("320x360")
root.configure(background="#000000")
Lights_Out = LightsOut(root)
root.mainloop()
