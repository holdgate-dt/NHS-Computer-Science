from tkinter import *
from tkinter import messagebox
from random import randint
import inspect

class TTT:
    
    
    
    tile_objects = None
    turnspace = 0
    gamemode = 0
    def clear_board(self):
        for x in range(len(self.tile_objects)):
            self.tile_objects[x].configure(text="")
            self.turnspace = 0
    
    def nextTurn(self, x):
        self.turnspace += x
    
    def winCheck(self):
        winScenarios = [[0,1,2], [3,4,5], [6,7,8], [0,3,6], [1,4,7], [2,5,8], [0,4,8], [2,4,6]]
        for scenario in winScenarios:
            xWinCheck = 0
            oWinCheck = 0
            for index in scenario:
                if self.tile_objects[index].cget("text") == "X":
                    xWinCheck += 1
                elif self.tile_objects[index].cget("text") == "O":
                    oWinCheck += 1
            if xWinCheck == 3:
                messagebox.showinfo("Win", "X Wins")
                self.label.configure(text="X's Turn")
                self.clear_board()
                
            elif oWinCheck == 3:
                messagebox.showinfo("Win", "O Wins")
                self.clear_board()
        blankCount = 9
        for tile in self.tile_objects:
            if tile.cget("text") != "":
                blankCount -= 1
        if blankCount == 0:
            messagebox.showinfo("Tie", "Tie Game")
            self.label.configure(text="X's Turn")
            self.clear_board()
    
    def pvc(self, main):
        global turnspace

        if self.tile_objects[main].cget("text") == "":
            if self.turnspace % 2 == 0:
                self.tile_objects[main].configure(text="X")
                
                self.label.configure(text="O's Turn")
                
                self.nextTurn(1)
            else:
                while True:
                    compChoice = randint(0,8)
                    if self.tile_objects[compChoice].cget("text") == "X" or self.tile_objects[compChoice].cget("text") == "O":
                        continue
                    else:
                        self.tile_objects[compChoice].configure(text="O")
                        break
                
                self.label.configure(text="X's Turn")
                
                self.nextTurn(1)
            
            self.winCheck()
    
    def pvp(self, main):
        global turnspace

        if self.tile_objects[main].cget("text") == "":
            if self.turnspace % 2 == 0:
                self.tile_objects[main].configure(text="X")
                
                self.label.configure(text="O's Turn")
                
                self.nextTurn(1)
            else:
                self.tile_objects[main].configure(text="O")
                
                self.label.configure(text="X's Turn")
                
                self.nextTurn(1)
            
            self.winCheck()
            
        else:
             messagebox.showinfo("Error", "Invalid Move")
        
    
    def modeSelection(self):
        
        self.selection = Tk()
        self.selection.geometry("100x100")
        self.selection.title("!")
        B1 = Button(self.selection, text="vs. Player", command=lambda:self.modeChange("player"))
        B1.pack()
        B2 = Button(self.selection, text="vs. Computer", command=lambda:self.modeChange("computer"))
        B2.pack()
        
        self.selection.mainloop()
        
    def modeChange(self, mode):
        global gamemode
        if mode == "player":
            gamemode = 0
        
        if mode == "computer":
            gamemode = 1

        if gamemode == 1:
            x = 0
            for objects in self.tile_objects:
                
                objects.configure(command=lambda:self.pvc(x))
                x += 1
        elif gamemode == 0:
            x = 0
            for objects in self.tile_objects:
                objects.configure(command=lambda:self.pvp(x))
                x += 1
        self.selection.destroy()
        
    def __init__(self, master):
        
        self.master = master
         
        
        self.tile0 = Button(master, text="", fg="#000000", bg="#FFFFFF", relief="solid", borderwidth=3, command=lambda:self.pvp(0))
        self.tile0.place(x=0, y=0, height = 200, width = 200)
        
        self.tile1 = Button(master, text="", fg="#000000", bg="#FFFFFF", relief="solid", borderwidth=3, command=lambda:self.pvp(1))
        self.tile1.place(x=200, y=0, height = 200, width = 200)
        
        self.tile2 = Button(master, text="", fg="#000000", bg="#FFFFFF", relief="solid", borderwidth=3, command=lambda:self.pvp(2))
        self.tile2.place(x=400, y=0, height = 200, width = 200)
        
        self.tile3 = Button(master, text="", fg="#000000", bg="#FFFFFF", relief="solid", borderwidth=3, command=lambda:self.pvp(3))
        self.tile3.place(x=0, y=200, height = 200, width = 200)
        
        self.tile4 = Button(master, text="", fg="#000000", bg="#FFFFFF", relief="solid", borderwidth=3, command=lambda:self.pvp(4))
        self.tile4.place(x=200, y=200, height = 200, width = 200)
        
        self.tile5 = Button(master, text="", fg="#000000", bg="#FFFFFF", relief="solid", borderwidth=3, command=lambda:self.pvp(5))
        self.tile5.place(x=400, y=200, height = 200, width = 200)
        
        self.tile6 = Button(master, text="", fg="#000000", bg="#FFFFFF", relief="solid", borderwidth=3, command=lambda:self.pvp(6))
        self.tile6.place(x=0, y=400, height = 200, width = 200)
        
        self.tile7 = Button(master, text="", fg="#000000", bg="#FFFFFF", relief="solid", borderwidth=3, command=lambda:self.pvp(7))
        self.tile7.place(x=200, y=400, height = 200, width = 200)
        
        self.tile8 = Button(master, text="", fg="#000000", bg="#FFFFFF", relief="solid", borderwidth=3, command=lambda:self.pvp(8))
        self.tile8.place(x=400, y=400, height = 200, width = 200)
        
        self.tile_objects = [self.tile0, self.tile1, self.tile2, self.tile3, self.tile4, self.tile5, self.tile6, self.tile7, self.tile8]
        
        self.label = Label(master, text="X's Turn", fg="#000000", bg="#FFFFFF")
        self.label.place(x=0, y=600, height=100, width = 600)
        
        self.modeSelection()
        
        
root = Tk()
root.geometry("600x700")
root.configure(bg="#000000")
TTT = TTT(root)
root.mainloop()
